#!/usr/bin/python
import random
import logging 

logging.info("Started")
supreme_gen = input("Enter the target string\n>>")
gen_length = len(supreme_gen)
alphabet = []

for l in "ABCDEFGHIİJKLMNOÖPRSTUÜVYZXQW ":
    alphabet.append(l)
logging.error(("Current alphabet is",alphabet))
primal_soup = []  ## "".join(random.choice(alphabet) for i in range(len(supreme_gen)))
for i in range(len(supreme_gen)):
    primal_soup.append(random.choice(alphabet))

generations = {0:primal_soup}


class Generation:
    def __init__(self, n, pregen):
        self.genno = n
        self.pregen = pregen
        

    def gencode(self):
        dna_no = random.randint(0,gen_length)
        pregenlist = []
        for i in self.pregen:
            pregenlist.append(i)
        pregenlist[dna_no] = random.choice(alphabet)
        newgen = pregenlist
        logging.error(("Generation's gen is",self.pregen))
        return newgen

def race_create():
    gen_no = 1
    race = Generation(gen_no,primal_soup)
    current_gen = race.gencode()
    while current_gen != supreme_gen:
        gen_no +=1
        race = Generation(gen_no,current_gen)
        current_gen = race.gencode()
        generations.setdefault(gen_no,current_gen)
    print("Last generation has reached its final state!")


race_create()

print("Generations;\n",generations)
